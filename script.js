"use strict";

const form = document.querySelector(".form");
const containerWorkouts = document.querySelector(".workouts");
const inputType = document.querySelector(".form__input--type");
const inputDistance = document.querySelector(".form__input--distance");
const inputDuration = document.querySelector(".form__input--duration");
const inputCadence = document.querySelector(".form__input--cadence");
const inputElevation = document.querySelector(".form__input--elevation");

class Workout {
  date = new Date();
  id = (Date.now() + "").slice(-10);
  constructor(coords, distance, duration) {
    this.coords = coords;
    this.distance = distance;
    this.duration = duration;
  }
  _setDescription() {
    //prettier-ignore
    const months = ["January","February","March","April","May","June","July","August","September","October","November","December",];
    this.description = `${this.type[0].toUpperCase()}${this.type.slice(1)}${
      months[this.date.getMonth()]
    }${this.date.getDate()}`;
  }
}
class Running extends Workout {
  type = "running";
  constructor(coords, distance, duration, codence) {
    super(coords, distance, duration);
    this.codence = codence;
    this.calcPace();
    this._setDescription();
  }
  calcPace() {
    this.pace = this.duration / this.distance;
    return this.pace;
  }
}

class Cycling extends Workout {
  type = "cycling";
  constructor(coords, distance, duration, elevation) {
    super(coords, distance, duration);
    this.elevation = elevation;
    this.calcSpeed();
    this._setDescription();
  }
  calcSpeed() {
    this.speed = this.distance / (this.duration / 60);
    return this.speed;
  }
}

class App {
  _workouts = [];
  _map;
  _mapEvent;
  constructor() {
    //–∑–∞–ø—É—Å–∫ –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this._getPosition();
    //–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ LS
    this._getLocalStorage();
    //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ _newWorkout
    form.addEventListener("submit", this._newWorkout.bind(this));
    //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ _toogleField
    inputType.addEventListener("change", this._toogleField);
    containerWorkouts.addEventListener("click", this._moveToPopup.bind(this));
  }
  // –ú–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞, –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è _loadMap
  _getPosition() {
    if (navigator.geolocation)
      navigator.geolocation.getCurrentPosition(
        this._loadMap.bind(this),
        //–º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, –≤ —Å–ª—É—á–∞–µ –æ—Ç–∫–∞–∑–∞
        function () {
          alert("–í—ã –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Å–≤–æ–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é");
        }
      );
  }
  //–º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ä—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –≤ —Å–ª—É—á–∞–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–æ –æ—Ç–≤–µ—Ç–∞ –æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å–≤–æ–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
  _loadMap(position) {
    const { latitude } = position.coords;
    const { longitude } = position.coords;
    const coords = [latitude, longitude];
    this._map = L.map("map").setView(coords, 13);

    L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
      attribution:
        '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(this._map);
    //–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–∞—Ä—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å—Ç–∏—Ç –º–µ—Ç–æ–¥ _showForm
    this._map.on("click", this._showForm.bind(this));
    this._workouts.forEach((work) => {
      this._renderWorkMarker(work);
    });
  }
  //–º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–æ–±—Ä–∞–∑–∏—Ç —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫–∞—Ä—Ç—É
  _showForm(mapE) {
    this._mapEvent = mapE;
    form.classList.remove("hidden");
    inputDistance.focus();
  }
  //–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  _toogleField() {
    inputCadence.closest(".form__row").classList.toggle("form__row--hidden");
    inputElevation.closest(".form__row").classList.toggle("form__row--hidden");
  }
  _newWorkout(e) {
    e.preventDefault();
    const validInputs = (...inputs) =>
      inputs.every((inp) => Number.isFinite(inp));
    const allPositive = (...inputs) => inputs.every((inp) => inp > 0);
    //–ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º
    const type = inputType.value;
    const distance = +inputDistance.value;
    const duration = +inputDuration.value;
    const { lat, lng } = this._mapEvent.latlng;
    let workout;
    //–µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–±–µ–∂–∫–∞, —Å–æ–∑–¥–∞—Ç—å –æ–±—ä–µ–∫—Ç –ø—Ä–æ–±–µ–∂–∫–∏
    if (type === "running") {
      const codence = +inputCadence.value;
      //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      if (
        !validInputs(distance, duration, codence) ||
        !allPositive(distance, duration)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
      }

      workout = new Running([lat, lng], distance, duration, codence);
    }
    //–µ—Å–ª–∏ —ç—Ç–æ –≤–µ–ª–æ—Å–∏–ø–µ–¥, —Å–æ–∑–¥–∞—Ç—å –æ–±–µ–∫—Ç –≤–µ–ª–æ—Å–∏–ø–µ–¥
    if (type === "cycling") {
      const elevation = +inputElevation.value;
      //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      if (
        !validInputs(distance, duration, elevation) ||
        !allPositive(distance, duration)
      ) {
        return alert("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ");
      }

      workout = new Cycling([lat, lng], distance, duration, elevation);
    }
    //–¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ workout
    this._workouts.push(workout);

    //—Ä–µ–Ω–¥–µ—Ä –º–∞—Ä–∫–µ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    this._renderWorkMarker(workout);
    // –†–µ–Ω–¥–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    this._renderworkout(workout);
    //—Å–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É
    this._hideForm();
    //—Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    this._setLocalStorage();
  }
  _renderWorkMarker(workout) {
    L.marker(workout.coords)

      .addTo(this._map)

      .bindPopup(
        L.popup({
          maxWidth: 250,
          minWidth: 100,
          autoClose: false,
          closeOnClick: false,
          className: "mark-popup",
        })
      )
      .setPopupContent(
        `${workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"}${workout.description}`
      )
      .openPopup();

    //–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ —Å–ø—Ä—è—Ç–∞—Ç—å —Ñ–æ—Ä–º—É
  }
  _hideForm() {
    inputDistance.value =
      inputDuration.value =
      inputCadence.value =
      inputElevation.value =
        "";
    form.classList.add("hidden");
  }
  //—Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
  _renderworkout(workout) {
    let html = `<li class="workout workout--${workout.type}" data-id="${
      workout.id
    }">
    <h2 class="">${workout.description}</h2>
    <div class="workout__details">
      <span class="workout__icon">${
        workout.type === "running" ? "üèÉ‚Äç‚ôÇÔ∏è" : "üö¥‚Äç‚ôÄÔ∏è"
      }</span>
      <span class="workout__value">${workout.distance}</span>
      <span class="workout__unit">–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚è±</span>
      <span class="workout__value">${workout.duration}</span>
      <span class="workout__unit">–º–∏–Ω</span>
    </div>`;
    if (workout.type === "running") {
      html += `<div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${workout.pace.toFixed(1)}</span>
      <span class="workout__unit">–º–∏–Ω/–∫–º</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">ü¶∂üèº</span>
      <span class="workout__value">${workout.codence}</span>
      <span class="workout__unit">—à–∞–≥</span>
    </div>
  </li>`;
    }
    if (workout.type === "cycling") {
      html += `<div class="workout__details">
      <span class="workout__icon">‚ö°Ô∏è</span>
      <span class="workout__value">${workout.speed.toFixed(1)}</span>
      <span class="workout__unit">–∫–º/—á–∞—Å</span>
    </div>
    <div class="workout__details">
      <span class="workout__icon">‚õ∞</span>
      <span class="workout__value">${workout.elevation}</span>
      <span class="workout__unit">–º</span>
    </div>
  </li> `;
    }
    form.insertAdjacentHTML("afterend", html);
  }
  _moveToPopup(e) {
    const workoutEL = e.target.closest(".workout");
    console.log(workoutEL);
    if (!workoutEL) {
      return;
    }
    const workout = this._workouts.find(
      (work) => work.id === workoutEL.dataset.id
    );
    this._map.setView(workout.coords, 13, {
      animate: true,
      pan: { duration: 1 },
    });
  }
  _setLocalStorage() {
    localStorage.setItem("workouts", JSON.stringify(this._workouts));
  }
  _getLocalStorage() {
    const data = JSON.parse(localStorage.getItem("workouts"));
    console.log(data);
    if (!data) return;
    this._workouts = data;
    this._workouts.forEach((work) => {
      this._renderworkout(work);
    });
  }
  reset() {
    localStorage.removeItem("workouts");
    location.reload();
  }
}
const app = new App();
